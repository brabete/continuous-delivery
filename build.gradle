buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.1.15.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.liquibase.gradle' version '2.0.1'
    id 'nebula.lint' version '9.3.2'
    id 'org.sonarqube' version '2.7.1'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

defaultTasks "bootRun"

gradleLint {
    alwaysRun = false
    rules = ['unused-dependency']
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springBootAdminVersion', "2.1.5")
    set('springCloudVersion', "Greenwich.SR2")
    set('testContainersVersion', "1.14.3")
    set('liquibase_hibernate5_version', "3.6")
    set('cucumberVersion', "4.7.1")
    set('pactVersion', "3.5.24")
    set('restAssuredVersion', "3.1.0")
    set('wireMockVersion', "2.24.1")
    set('problemSpringVersion', "0.24.0")
    set('jacksonVersion', "2.10.0")
    set('nettyCodecVersion', "4.1.50.Final")
}

test {
    useJUnitPlatform()
    description = "Execute Unit Tests"
    exclude "**/*IT*", "**/*IntTest*", "**/*CucumberIT*"
    testLogging {
        events 'FAILED', 'SKIPPED', 'PASSED'
    }

    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute Integration Tests"
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    exclude "**/*CucumberIT*"
    testLogging {
        events 'FAILED', 'SKIPPED', 'PASSED'
    }

    reports.html.enabled = false
}

task cucumberTest(type: Test) {
    description = "Execute Cucumber Behaviour Driven tests."
    group = "verification"
    include "**/*CucumberIT*"
    testLogging {
        events 'FAILED', 'SKIPPED', 'PASSED'
    }

    reports.html.enabled = false
}

check.dependsOn integrationTest
check.dependsOn cucumberTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

task cucumberTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn cucumberTest
}

dependencies {
    // Runtime Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.postgresql:postgresql'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.hibernate:hibernate-envers'
    implementation "org.zalando:problem-spring-web:${problemSpringVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "io.netty:netty-codec-http:${nettyCodecVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testCompile "org.testcontainers:testcontainers:${testContainersVersion}"
    testCompile "org.testcontainers:postgresql:${testContainersVersion}"
    testCompile "io.rest-assured:rest-assured:${restAssuredVersion}"

    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'junit:junit'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation "com.github.tomakehurst:wiremock:${wireMockVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"
    testImplementation "au.com.dius:pact-jvm-consumer-junit_2.11:${pactVersion}"
    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude module: "junit"
    }

    // Liquibase Config
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
